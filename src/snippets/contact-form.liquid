<div class="contact-form__wrap">
{% form 'contact' %}

{% if form.posted_successfully? %}
    <h4 class="h4 form-success">
      {{settings.signup_success | default : "Thanks! You'll be hearing from us soon!"}}
    </h4>
  {% endif %}
  
  
  {{ form.errors | default_errors }}
<div class="input-group">
  <label for="ContactFormName">{{ 'contact.form.name' | t }}</label>
  <input type="text"
    name="contact[name]"
    id="ContactFormName"
    placeholder="Your {{ 'contact.form.name' | t }}"
    value="{% if form[name] %}{{ form[name] }}{% elsif customer %}{{ customer.name }}{% endif %}">
</div>
<div class="input-group">
  <label for="ContactFormEmail">{{ 'contact.form.email' | t }}</label>
  <input type="email"
    name="contact[email]"
    id="ContactFormEmail"
    placeholder="Your {{ 'contact.form.email' | t }}"
    value="{% if form.email %}{{ form.email }}{% elsif customer %}{{ customer.email }}{% endif %}"
    spellcheck="false"
    autocomplete="off"
    autocapitalize="off">
</div>

<div class="input-group full">
  <label for="ContactFormMessage">{{ 'contact.form.message' | t }}</label>
  <textarea rows="10"
    name="contact[body]"
    id="Your ContactFormMessage"
    placeholder="{{ 'contact.form.message' | t }}">
    {%- if form.body -%}
      {{- form.body -}}
    {%- endif -%}
  </textarea>
</div>
<div class="input-group full centered">
  <button type="submit" class="button" value="">{{ 'contact.form.send' | t }}</button>
</div>

{% endform %}

</div>




<script src="https://www.google.com/recaptcha/api.js?onload=onloadCallback&render=explicit"
    async defer>
</script>
<script>

///BEFORE POLYFILL
(function (arr) {
  arr.forEach(function (item) {
    if (item.hasOwnProperty('before')) {
      return;
    }
    Object.defineProperty(item, 'before', {
      configurable: true,
      enumerable: true,
      writable: true,
      value: function before() {
        var argArr = Array.prototype.slice.call(arguments),
          docFrag = document.createDocumentFragment();

        argArr.forEach(function (argItem) {
          var isNode = argItem instanceof Node;
          docFrag.appendChild(isNode ? argItem : document.createTextNode(String(argItem)));
        });

        this.parentNode.insertBefore(docFrag, this);
      }
    });
  });
})([Element.prototype, CharacterData.prototype, DocumentType.prototype]);

var captchaKey = '6Lf0edwUAAAAAKqCGNgOh3TkP9sTmlJf6HB7cRMB';
var form = document.querySelector('form.contact-form');

var button = form.querySelector('.button');

var captcha = document.createElement('div');

captcha.id="captcha-ph"

var error = document.createElement('p');
error.classList.add('error');
error.innerHTML= "We were unable to verify you were human. Please try again!";
form.append(error);

button.before(captcha)


var onloadCallback = function() {
  grecaptcha.render('captcha-ph', {
    'sitekey' : captchaKey
  });
};


function showError() {
  form.classList.add('error');
  form.classList.remove('loading');
  form.classList.remove('success');
  button.innerHTML = 'Try Again'
}
function showSuccess() {
  form.classList.add('success');
  form.classList.remove('loading');
  form.classList.remove('error');
  button.innerHTML = 'Success'
}


form.addEventListener('submit', function(event) {
  
  form.classList.add('loading');
  event.preventDefault();
console.log(grecaptcha.getResponse());
  
  if (grecaptcha.getResponse() == "") {
      showError();
      return false;
    }
  else {
    form.submit();
  }
})
</script>

<style>
form.loading {
 opacity: 0.6;
  pointer-events: none;  
}
form.loading .button {
  background: gray;
}
form.error {
  opacity: 1;
  pointer-events: all; 
}

form p.error {
  display: none;
}

form.error p.error {
  display: block;
  background: red;
  padding: 12px 20px;
  color: white;
  margin: 12px auto;
}
#captcha-ph {
    display: block;
    margin: -10px auto 20px;
    max-width: 300px;
}
form.error button{
  background: red;
}
form.success button{
  background: #00ff00;
}
</style>